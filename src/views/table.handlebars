<style>
  .chartdiv {
    width: 100%;
    height: 500px;
  }
</style>

<script src="https://cdn.amcharts.com/lib/5/index.js"></script>
<script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
<script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
<script src="https://cdn.amcharts.com/lib/5/percent.js"></script>
<script src="//cdn.amcharts.com/lib/5/themes/Material.js"></script>

<div class="container-fluid">

  <ul class="nav nav-tabs border-bottom-0">
    <li class="nav-item">
      <a class="nav-link active nav-link-edit" aria-current="page" href="#" onclick="enable(0)" id="tab0" >WP2</a>
    </li>
    <li class="nav-item">
      <a class="nav-link nav-link-edit" href="#" onclick="enable(1)" id="tab1">WP3</a>
    </li>
    <li class="nav-item">
      <a class="nav-link nav-link-edit" href="#" onclick="enable(2)" id="tab2">WP4</a>
    </li>
    <li class="nav-item">
      <a class="nav-link nav-link-edit" href="#" onclick="enable(3)" id="tab3">WP5</a>
    </li>
    <li class="nav-item">
      <a class="nav-link nav-link-edit" href="#" onclick="enable(4)" id="tab4">WP6</a>
    </li>
    <li class="nav-item">
      <a class="nav-link nav-link-edit" href="#" onclick="enable(5)" id="tab5">WP7</a>
    </li>
  </ul>

  <div class="row row-cols-2">
    <div class="col">
       <table class="table" id="table0"></table>
    </div>
    <div class="col">
        <div id="chartdiv0" class="chartdiv"></div> 
    </div>
  </div>
  <div class="row row-cols-2">
    <div class="col">
       <table class="table" id="table1" style="display: none;"></table>
    </div>
    <div class="col">
      <div id="chartdiv1" class="chartdiv" style="display: none;"></div> 
    </div>
  </div>
  <div class="row row-cols-2">
    <div class="col">
       <table class="table" id="table2" style="display: none;"></table>
    </div>
    <div class="col">
      <div id="chartdiv2" class="chartdiv" style="display: none;"></div> 
    </div>
  </div>
  <div class="row row-cols-2">
    <div class="col">
       <table class="table" id="table3" style="display: none;"></table>
    </div>
    <div class="col">
      <div id="chartdiv3" class="chartdiv" style="display: none;"></div> 
    </div>
  </div>
  <div class="row row-cols-2">
    <div class="col">
       <table class="table" id="table4" style="display: none;"></table>
    </div>
    <div class="col">
      <div id="chartdiv4" class="chartdiv" style="display: none;"></div> 
    </div>
  </div>
  <div class="row" id="piediv" style="display: none;">
    <ul class="nav nav-tabs border-bottom-0">
      <li class="nav-item">
        <a class="nav-link active nav-link-edit" href="#" onclick="enablePieChart(0)" id="pietab0" >Participation per vertical</a>
      </li>
      <li class="nav-item">
        <a class="nav-link nav-link-edit" href="#" onclick="enablePieChart(1)" id="pietab1">Participation per profile</a>
      </li>
    </ul>
    <div class="row">
      <div id="piechartdiv0" class="chartdiv" style="display: none;"></div>
      <div id="piechartdiv1" class="chartdiv" style="display: none;"></div>
    </div>
  </div>
  <div class="row row-cols-2">
    <div class="col">
       <table class="table" id="table5" style="display: none;"></table>
    </div>
    <div class="col">
      <div id="chartdiv5" class="chartdiv" style="display: none;"></div> 
    </div>
  </div>
</div>

<script>

var numTablas = 0;
function main(){
  loadDatosTablas()
  //loadDatosPie()
}

function loadDatosTablas(){
    fetch('/datos-table', {method: 'GET'})
    .then(res =>  res.json())
    .then(data =>{
        data.sheets.forEach((sheet, index)=> {
          let id = "table"+index
          montarTabla(sheet, id)
          loadJsonDatos(sheet,index)
          numTablas+=1
        })
    })
    .catch(e => {
      console.log(e);
    });
}

function montarTabla(json, idTabla){
 let html = ''
 json.sheet.forEach( (element, index) => {
 if(index == 0){
    html+= `<thead><tr>`
    element.filanueva.forEach((clave) => {
    html+=`<th>${clave.clave}</th>`
    })
      html+= `</thead></tr>`
    }else{
      html+= `<tbody><tr>`
      element.filanueva.forEach((clave) => {
        html+=`<td>${clave.clave}</td>`
      })
        html+= `</tbody></tr>`
    }
});

var tabla = document.getElementById(idTabla)
tabla.innerHTML = html

}

function enable(id){
  disableRest()
  var idTabla = "table"+id
  var idTab = "tab"+id
  var idGraph = "chartdiv"+id
  var tabla = document.getElementById(idTabla).style.display="block"
  var tab = document.getElementById(idTab).classList.add("active")
  var graph = document.getElementById(idGraph).style.display="block"
  if(id == 4) document.getElementById("piediv").style.display="block"

}

function disableRest(){
  for(let i=0; i<numTablas; i++){
    var idTabla = "table"+i
    var idTab = "tab"+i
    var idGraph = "chartdiv"+i
    var tabla = document.getElementById(idTabla).style.display="none"
    var tab = document.getElementById(idTab).classList.remove("active")
    var graph = document.getElementById(idGraph).style.display="none"
    if(i == 4) document.getElementById("piediv").style.display="none"
  } 
  
}

function loadJsonDatos(jsonSheet,id){
  let data=[]

  jsonSheet.sheet.forEach((entrada, index)=>{
    if(index == 0){
      	
    }else{
        
      let jsonAux = {
        "CODE":"",
        "PERIOD1":0,
        "PERIOD2":0,
        "PERIOD3":0,
      }

      jsonAux.CODE = entrada.filanueva[2].clave

      if(entrada.filanueva[3].clave == "-"){
        jsonAux.PERIOD1 = 0
      }else{
        jsonAux.PERIOD1 = entrada.filanueva[3].clave
      }
      
      if(entrada.filanueva[4].clave == "-"){
        jsonAux.PERIOD2 = 0
      }else{
        jsonAux.PERIOD2 = entrada.filanueva[4].clave
      }

      if(entrada.filanueva[5].clave == "-"){
        jsonAux.PERIOD3 = 0
      }else{
        jsonAux.PERIOD3 = entrada.filanueva[5].clave
      }

      data.push(jsonAux) 
      
    }

  })
    loadGraficos(data, id)
}


function loadGraficos(data, id){
  switch (id) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      createDefaultColumnChart(data, id)
      break;
    case 4:
      createDefaultColumnChart(data, id)
      break;
    default:
      console.log("No chart for that id")
  }
}

function createDefaultColumnChart(data, id){
  am5.ready(function() {

  let chartdiv = "chartdiv"+id
  var root = am5.Root.new(chartdiv);

  root.setThemes([
    am5themes_Animated.new(root)
  ]);

  var chart = root.container.children.push(am5xy.XYChart.new(root, {
    panX: false,
    panY: false,
    wheelX: "panX",
    wheelY: "zoomX",
    layout: root.verticalLayout
  }));

  chart.set("scrollbarX", am5.Scrollbar.new(root, {
    orientation: "horizontal"
  })); 

  var legend = chart.children.push(
    am5.Legend.new(root, {
      centerX: am5.p50,
      x: am5.p50
    })
  );

  var xRenderer = am5xy.AxisRendererX.new(root, {
    cellStartLocation: 0.1,
    cellEndLocation: 0.9
  })

  var xAxis = chart.xAxes.push(am5xy.CategoryAxis.new(root, {
    categoryField: "CODE",
    renderer: xRenderer,
    tooltip: am5.Tooltip.new(root, {})
  }));

  xRenderer.grid.template.setAll({
    location: 1
  })

  xAxis.data.setAll(data);

  var yAxis = chart.yAxes.push(am5xy.ValueAxis.new(root, {
    renderer: am5xy.AxisRendererY.new(root, {
      strokeOpacity: 0.1
    })
  }));

  function makeSeries(name, fieldName) {
    var series = chart.series.push(am5xy.ColumnSeries.new(root, {
      name: name,
      xAxis: xAxis,
      yAxis: yAxis,
      valueYField: fieldName,
      categoryXField: "CODE"
    }));

    series.columns.template.setAll({
      tooltipText: "{name}, {categoryX}: {valueY}",
      width: am5.percent(90),
      tooltipY: 0,
      strokeOpacity: 0
    });

    series.data.setAll(data);

    series.appear();

    series.bullets.push(function() {
      return am5.Bullet.new(root, {
        locationY: 0,
        sprite: am5.Label.new(root, {
          text: "{valueY}",
          fill: root.interfaceColors.get("alternativeText"),
          centerY: 0,
          centerX: am5.p50,
          populateText: true
        })
      });
    });

    legend.data.push(series);
  }

  makeSeries("1ยบ Period", "PERIOD1");
  makeSeries("2ยบ Period", "PERIOD2");
  makeSeries("3ยบ Period", "PERIOD3");

  chart.appear(1000, 100);

  }); 
}

function createStackedColumnChart(data, id){
  am5.ready(function() {

  let chartdiv = "chartdiv"+id
  var root = am5.Root.new(chartdiv);

  root.setThemes([
    am5themes_Animated.new(root),
    am5themes_Material.new(root)
  ]);

  var chart = root.container.children.push(am5xy.XYChart.new(root, {
    panX: false,
    panY: false,
    wheelX: "panX",
    wheelY: "zoomX",
    layout: root.verticalLayout
  }));

  chart.set("scrollbarX", am5.Scrollbar.new(root, {
    orientation: "horizontal"
  })); 

  var xAxis = chart.xAxes.push(am5xy.CategoryAxis.new(root, {
    categoryField: "CODE",
    renderer: am5xy.AxisRendererX.new(root, {}),
    tooltip: am5.Tooltip.new(root, {})
  }));

  xAxis.data.setAll(data);

  var yAxis = chart.yAxes.push(am5xy.ValueAxis.new(root, {
    min: 0,
    renderer: am5xy.AxisRendererY.new(root, {})
  }));

  var legend = chart.children.push(am5.Legend.new(root, {
    centerX: am5.p50,
    x: am5.p50
  }));

  function makeSeries(name, fieldName) {
    var series = chart.series.push(am5xy.ColumnSeries.new(root, {
      name: name,
      stacked: true,
      xAxis: xAxis,
      yAxis: yAxis,
      valueYField: fieldName,
      categoryXField: "CODE"
    }));

    series.columns.template.setAll({
      tooltipText: "{name}, {categoryX}: {valueY}",
      tooltipY: am5.percent(10)
    });
    series.data.setAll(data);

    series.appear();

    series.bullets.push(function () {
      return am5.Bullet.new(root, {
        sprite: am5.Label.new(root, {
          text: "{valueY}",
          fill: root.interfaceColors.get("alternativeText"),
          centerY: am5.p50,
          centerX: am5.p50,
          populateText: true
        })
      });
    });

    legend.data.push(series);
  }

  makeSeries("1ยบ Period", "PERIOD1");
  makeSeries("2ยบ Period", "PERIOD2");
  makeSeries("3ยบ Period", "PERIOD3");

  chart.appear(1000, 100);

});
}

//Pie chart logic
function enablePieChart(id){
  let id2; 
  id==0 ? id2 = 1 : id2 = 0;
  disableRestPieChart(id2)
  var idPieTab = "pietab"+id
  var idPieChart = "piechartdiv"+id
  var tab = document.getElementById(idPieTab).classList.add("active")
  var chart = document.getElementById(idPieChart).style.display="block"
}

function disableRestPieChart(id){ 
  var idPieTab = "pietab"+ id
  var idPieChart = "piechartdiv"+ id
  var tab = document.getElementById(idPieTab).classList.remove("active")
  var graph = document.getElementById(idPieChart).style.display="none"
}

async function loadDatosPie(){
    await fetch('/datos-pie', {method: 'GET'})
    .then(res =>  res.json())
    .then(data =>{
       //datos tienen que venir como un array de jsons donde cada json tiene category y value 
    })
    .catch(e => {
      console.log(e);
    });

  createPieChart(data, 0)
  createPieChart(data, 1)
}


function createPieChart(data,id){
  
  am5.ready(function() {

  let piechartdiv = "piechartdiv"+id
  var root = am5.Root.new(piechartdiv);

  root.setThemes([
    am5themes_Animated.new(root)
  ]);

  var chart = root.container.children.push(
    am5percent.PieChart.new(root, {
      endAngle: 270
    })
  );

  var series = chart.series.push(
    am5percent.PieSeries.new(root, {
      valueField: "value",
      categoryField: "category",
      endAngle: 270
    })
  );

  series.states.create("hidden", {
    endAngle: -90
  });

  series.data.setAll([{
    category: "Lithuania",
    value: 501.9
  }, {
    category: "Czechia",
    value: 301.9
  }, {
    category: "Ireland",
    value: 201.1
  }, {
    category: "Germany",
    value: 165.8
  }, {
    category: "Australia",
    value: 139.9
  }, {
    category: "Austria",
    value: 128.3
  }, {
    category: "UK",
    value: 99
  }]);

  series.appear(1000, 100);

  });
}

main()
</script>
