<style>
    .chartdiv {
        width: 85%;
        height: 600px;
    }
    
    #container-country{
        display: none;   
    }

    .spinner-edit{
        top: 51%;
        left: 51%;
        position: absolute;
        z-index: 10;
        width: 3rem; 
        height: 3rem;
    }

    .btn-secondary.active{
        background-color: rgb(77, 77, 77) !important;
    }

</style>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script src="https://cdn.amcharts.com/lib/5/index.js"></script>
<script src="https://cdn.amcharts.com/lib/5/map.js"></script>
<script src="https://cdn.amcharts.com/lib/5/geodata/worldLow.js"></script>
<script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>

<script>

    var jsonMapa
    var jsonDatosPais
    var jsonDatosPaisProjects
    var flagHeat
    var rule = true
    var id = 0
    var id2 = 1
    var flag2 = false
    var flag3 = false

    async function main() {
        flag3 = false
        //Cargar datos del mapa
        async function loadDatosMapa() {
            const res = await fetch('/datos-map', { method: 'GET' })
            const data = await res.json()
            jsonMapa = data

        }
        await loadDatosMapa()

        //Crear mapa
        am5.ready(function () {
            let chartdiv = "chartdiv"+id
            var root = am5.Root.new(chartdiv);

            root.setThemes([
                am5themes_Animated.new(root)
            ]);

            var chart = root.container.children.push(am5map.MapChart.new(root, {
                homeZoomLevel: 4,
                homeGeoPoint: { longitude: 14, latitude: 52 },
                projection: am5map.geoMercator()
            }));   
        
            jsonMapa.countriesDelete.push("CD")

            var polygonSeries = chart.series.push(am5map.MapPolygonSeries.new(root, {
                geoJSON: am5geodata_worldLow,
                exclude: jsonMapa.countriesDelete,
                valueField: "value",
                calculateAggregates: true
            }));    

            polygonSeries.set("heatRules", [{
                target: polygonSeries.mapPolygons.template,
                dataField: "value",
                min: am5.color(0x9084e2), //72fd59
                max: am5.color(0xff4a4a),
                key: "fill"
            }]);

            polygonSeries.mapPolygons.template.events.on("pointerover", function(ev) {
                heatLegend.showValue(ev.target.dataItem.get("value"));
            });

            let arrayComplete = [];

            if(rule){
                (async () =>  { 
                    for(const [key, value] of Object.entries(jsonMapa.countries)){
                    
                    let arrayProjects = await loadNumberOfProjects(value.Nombre)
                    let obj = {
                        "id": value.id,
                        "totalpartnershare": value.TotalPartnerShare,
                        "numberprojects": arrayProjects.projects.length,
                        "value": arrayProjects.projects.length
                    }
                    arrayComplete.push(obj);
                    }
                    flag3 = true
                })()
            }else{
                (async () =>  { 
                    for(const [key, value] of Object.entries(jsonMapa.countries)){
                    
                    let arrayProjects = await loadNumberOfProjects(value.Nombre)
                    let obj = {
                        "id": value.id,
                        "totalpartnershare": value.TotalPartnerShare,
                        "numberprojects": arrayProjects.projects.length,
                        "value": value.TotalPartnerShare
                    }
                    arrayComplete.push(obj);
                    }
                    flag3 = true
                    
                })()
            } 
                
            setTimeout(()=>{polygonSeries.data.setAll(arrayComplete)}, 1000)
            
            polygonSeries.mapPolygons.template.setAll({
                tooltipText: "{name}\n" +
                    "Number of projects: {numberprojects}\n"+ 
                    "Total Partner Share: {totalpartnershare} €" ,
                toggleKey: "active",
                interactive: true
            });

            polygonSeries.mapPolygons.template.states.create("hover", {
                fill: root.interfaceColors.get("primaryButtonHover")
            });

            polygonSeries.mapPolygons.template.states.create("active", {
                fill: root.interfaceColors.get("primaryButtonHover")
            });

            var previousPolygon;

            polygonSeries.mapPolygons.template.on("active", function (active, target) {

                if (previousPolygon && previousPolygon != target) {
                    previousPolygon.set("active", false);
                }
                if (target.get("active")) {
                    polygonSeries.zoomToDataItem(target.dataItem );
                    let nombrePais = target._dataItem.dataContext.name
                    if(nombrePais == "Spain") console.log("Somos iguales")
                    let containerData = document.getElementById("container-country")
                    containerData.style.display="block"
                    setDatosContenedor(nombrePais)
                }
                else {
                    chart.goHome();
                }
                previousPolygon = target;
            });

            var heatLegend = chart.children.push(am5.HeatLegend.new(root, {
                orientation: "vertical",
                startColor: am5.color(0x9084e2), 
                endColor: am5.color(0xff4a4a), 
                startText: "Lowest",
                endText: "Highest",
                stepCount: 5
            }));

            heatLegend.startLabel.setAll({
                fontSize: 12,
                fill: heatLegend.get("startColor")
            });

            heatLegend.endLabel.setAll({
                fontSize: 12,
                fill: heatLegend.get("endColor")
            });

            let count = 0
            polygonSeries.events.on("datavalidated", function() {
                count++
                if (count==2){ 
                    chart.goHome()
                    heatLegend.set("startValue", polygonSeries.getPrivate("valueLow"));
                    heatLegend.set("endValue", polygonSeries.getPrivate("valueHigh"));
                    setTimeout(()=>{$('#mapcontainer').css('visibility', 'visible');},600)
                    setTimeout(()=>{$('#spinner').css('display', 'none');},400)
                    setTimeout(()=>{$('#buttonshare').removeClass('disabled')},550)
                }   
            });

            chart.chartContainer.get("background").events.on("click", function (obj) {
                chart.goHome();
                let div = document.getElementById("data-country")
                let html = ""
                div.innerHTML = html
            })

            chart.appear(10, 10);
        })

        async function setDatosContenedor(nombrePais){

            await loadDatosContenedor(nombrePais)
            let div = document.getElementById("data-country")
            let html = " "

            if(jsonDatosPais.projects.length == 0){
                html+=`
                    <li class="list-group-item d-flex justify-content-center align-items-center"> 
                        <div class="fw-bold"> No existing projects for this country...</div>
                    </li>`
            }else{
                jsonDatosPais.projects.forEach(project => {
                html+=
                    `<ul class=" list-group list-group-flush justify-content-center">
                        <li class="list-group-item d-flex justify-content-between align-items-center"> 
                            <div class="fw-bold"> Project name: </div>
                            <span class="fw-bold"> ${project.NombreProyecto} </span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center"> 
                            <div> Country name: </div>
                            <span class=""> ${project.Pais}</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center"> 
                            <div> Country share: </div>
                            <span class=""> ${project.Dinero} €</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center"> 
                            <div> Entity name: </div>
                            <span class=""> ${project.Entidad}</span>
                        </li>
                    </ul>`
                })
            }

            div.innerHTML = html
        }

        async function loadDatosContenedor(nombrePais){
            let fetchText = `/datos-country/${nombrePais}`
            const res = await fetch(fetchText, { method: 'GET' })
            var data = await res.json()
            jsonDatosPais = data
        }

        async function loadNumberOfProjects(nombrePais){
            let fetchText = `/datos-country/${nombrePais}`
            const res = await fetch(fetchText, { method: 'GET' })
            var data = await res.json()
            return data;
        }
    }

    function changeHeatRuleProject(){
        if(!$('#buttonproject').hasClass('active')){
            rule = true
            let map = document.getElementById("chartdiv"+id).style.display="none"
            let map2 = document.getElementById("chartdiv"+id2).style.display="block"
            id = 0
            id2 = 1
            $('#buttonproject').addClass('active')
            $('#buttonshare').removeClass('active')
            try{main()}catch(e){}
        }
    }

    function changeHeatRuleShare(){
        if(!flag2){
            flag2 = true
            $('#mapcontainer').css('visibility', 'hidden')
            $('#spinner').css('display', 'block');
        }
        if(!$('#buttonshare').hasClass('active')){
            rule = false
            let map = document.getElementById("chartdiv"+id).style.display="none"
            let map2 = document.getElementById("chartdiv"+id2).style.display="block"
            id = 1
            id2 = 0
            $('#buttonshare').addClass('active')
            $('#buttonproject').removeClass('active')
            try{main()}catch(e){}
        }
    }

    try{main()}catch(e){}
</script>

<div class="container-fluid">
    <div class="container-sm">
        <div class="row">
            <div class="col-2">
                <button type="button" id="buttonproject" class="btn btn-secondary active btn-edit" onclick="changeHeatRuleProject()">Number of projects</button>
                <br><br>
                <button type="button" id="buttonshare" class="btn btn-secondary disabled" onclick="changeHeatRuleShare()">Total partner share</button>
            </div>
            <div class="col-10">
                <div id="spinner" class="spinner-border spinner-edit text-secondary" role="status"></div>
                <div id="mapcontainer" class="d-flex justify-content-center" style="visibility:hidden;">
                    <div id="chartdiv0" class="chartdiv"></div>
                    <div id="chartdiv1" class="chartdiv" style="display: none;"></div>
                </div>
            </div>
        </div>
        <div id="container-country" class="mt-4 mb-4">
            <ul id="data-country" class=" list-group list-group-flush justify-content-center gap-4">

            </ul>
        </div>
    </div>
  
</div>



